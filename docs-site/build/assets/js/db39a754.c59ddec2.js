"use strict";(self.webpackChunkveloxx_docs=self.webpackChunkveloxx_docs||[]).push([[270],{7319:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>t});const n=JSON.parse('{"id":"api/python","title":"Python API Reference","description":"Complete API reference for Veloxx Python bindings.","source":"@site/docs/api/python.md","sourceDirName":"api","slug":"/api/python","permalink":"/veloxx/docs/api/python","draft":false,"unlisted":false,"editUrl":"https://github.com/Conqxeror/veloxx/tree/main/docs-site/docs/api/python.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Rust API Reference","permalink":"/veloxx/docs/api/rust"},"next":{"title":"Performance Benchmarks","permalink":"/veloxx/docs/performance/benchmarks"}}');var r=a(4848),i=a(8453);const l={},c="Python API Reference",d={},t=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Core Classes",id:"core-classes",level:2},{value:"<code>PyDataFrame</code>",id:"pydataframe",level:3},{value:"Constructors",id:"constructors",level:4},{value:"Class Methods",id:"class-methods",level:4},{value:"Properties",id:"properties",level:4},{value:"Data Access",id:"data-access",level:4},{value:"Data Manipulation",id:"data-manipulation",level:4},{value:"Grouping and Aggregation",id:"grouping-and-aggregation",level:4},{value:"Statistical Methods",id:"statistical-methods",level:4},{value:"Joining",id:"joining",level:4},{value:"Sorting and Ordering",id:"sorting-and-ordering",level:4},{value:"Data Cleaning",id:"data-cleaning",level:4},{value:"I/O Operations",id:"io-operations",level:4},{value:"Concatenation",id:"concatenation",level:4},{value:"<code>PyGroupedDataFrame</code>",id:"pygroupeddataframe",level:3},{value:"Aggregation Methods",id:"aggregation-methods",level:4},{value:"<code>PySeries</code>",id:"pyseries",level:3},{value:"Constructors",id:"constructors-1",level:4},{value:"Properties",id:"properties-1",level:4},{value:"Data Access",id:"data-access-1",level:4},{value:"Statistical Methods",id:"statistical-methods-1",level:4},{value:"Data Manipulation",id:"data-manipulation-1",level:4},{value:"<code>PyExpr</code>",id:"pyexpr",level:3},{value:"Static Methods",id:"static-methods",level:4},{value:"Arithmetic Operations",id:"arithmetic-operations",level:4},{value:"<code>PyJoinType</code>",id:"pyjointype",level:3},{value:"Convenience Functions",id:"convenience-functions",level:2},{value:"Data Loading",id:"data-loading",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Basic Data Analysis",id:"basic-data-analysis",level:3},{value:"Advanced Analytics",id:"advanced-analytics",level:3},{value:"Data Cleaning Pipeline",id:"data-cleaning-pipeline",level:3},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Integration with Pandas",id:"integration-with-pandas",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"python-api-reference",children:"Python API Reference"})}),"\n",(0,r.jsx)(s.p,{children:"Complete API reference for Veloxx Python bindings."}),"\n",(0,r.jsx)(s.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"pip install veloxx\n"})}),"\n",(0,r.jsx)(s.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import veloxx as vx\n\n# Load data\ndf = vx.read_csv("data.csv")\n\n# Basic operations\nfiltered = df.filter(df["age"] > 25)\ngrouped = df.groupby("department").mean()\n'})}),"\n",(0,r.jsx)(s.h2,{id:"core-classes",children:"Core Classes"}),"\n",(0,r.jsx)(s.h3,{id:"pydataframe",children:(0,r.jsx)(s.code,{children:"PyDataFrame"})}),"\n",(0,r.jsx)(s.p,{children:"The main data structure for working with tabular data in Python."}),"\n",(0,r.jsx)(s.h4,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"PyDataFrame(columns: dict)"}),(0,r.jsx)(s.p,{children:"Creates a new DataFrame from a dictionary of column names to PySeries."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"columns"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"dict"})," - Dictionary mapping column names to PySeries objects"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import veloxx as vx\n\ndf = vx.PyDataFrame({\n    "name": vx.PySeries("name", ["Alice", "Bob", "Charlie"]),\n    "age": vx.PySeries("age", [25, 30, 35]),\n    "salary": vx.PySeries("salary", [50000.0, 75000.0, 60000.0])\n})\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"class-methods",children:"Class Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"@classmethod from_csv(path: str) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Loads a DataFrame from a CSV file with automatic type inference."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"path"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Path to the CSV file"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'df = vx.PyDataFrame.from_csv("data/employees.csv")\nprint(f"Loaded {df.row_count()} rows")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"@classmethod from_json(path: str) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Loads a DataFrame from a JSON file."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"path"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Path to the JSON file"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'df = vx.PyDataFrame.from_json("data/users.json")\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"row_count() -> int"}),(0,r.jsx)(s.p,{children:"Returns the number of rows in the DataFrame."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'print(f"DataFrame has {df.row_count()} rows")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"column_count() -> int"}),(0,r.jsx)(s.p,{children:"Returns the number of columns in the DataFrame."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'print(f"DataFrame has {df.column_count()} columns")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"column_names() -> List[str]"}),(0,r.jsx)(s.p,{children:"Returns a list of column names."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'names = df.column_names()\nfor name in names:\n    print(f"Column: {name}")\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"data-access",children:"Data Access"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"get_column(name: str) -> Optional[PySeries]"}),(0,r.jsx)(s.p,{children:"Gets a column by name."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Name of the column to retrieve"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'age_column = df.get_column("age")\nif age_column:\n    print(f"Age column has {age_column.len()} values")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsxs)("div",{className:"api-method",children:[(0,r.jsx)(s.strong,{children:"getitem"}),"(key: str) -> PySeries"]}),(0,r.jsx)(s.p,{children:"Gets a column using bracket notation (syntactic sugar)."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# These are equivalent\nage1 = df.get_column("age")\nage2 = df["age"]\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"data-manipulation",children:"Data Manipulation"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"filter(row_indices: List[int]) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Filters rows by index positions."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"row_indices"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"List[int]"})," - List of row indices to keep"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# Filter rows where age > 25\nage_series = df.get_column("age")\nindices = [i for i, age in enumerate(age_series.to_list()) if age and age > 25]\nfiltered_df = df.filter(indices)\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"select_columns(names: List[str]) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Selects specific columns from the DataFrame."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"names"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"List[str]"})," - Names of columns to select"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'selected = df.select_columns(["name", "age"])\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"drop_columns(names: List[str]) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Removes specified columns from the DataFrame."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"names"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"List[str]"})," - Names of columns to drop"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'without_id = df.drop_columns(["id"])\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"rename_column(old_name: str, new_name: str) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Renames a column in the DataFrame."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"old_name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Current name of the column"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"new_name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - New name for the column"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'renamed = df.rename_column("age", "years")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"with_column(name: str, expr: PyExpr) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Adds a new column or replaces an existing one using an expression."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Name of the new column"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"expr"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"PyExpr"})," - Expression to compute the column values"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# Add a column with salary + 1000 bonus\nexpr = vx.PyExpr.add(\n    vx.PyExpr.column("salary"),\n    vx.PyExpr.literal(1000.0)\n)\nwith_bonus = df.with_column("salary_with_bonus", expr)\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"grouping-and-aggregation",children:"Grouping and Aggregation"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"group_by(by_columns: List[str]) -> PyGroupedDataFrame"}),(0,r.jsx)(s.p,{children:"Groups the DataFrame by specified columns."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"by_columns"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"List[str]"})," - Columns to group by"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'grouped = df.group_by(["department"])\nresult = grouped.mean()\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"describe() -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Generates descriptive statistics for numeric columns."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"stats = df.describe()\nprint(stats)\n"})})]}),"\n",(0,r.jsx)(s.h4,{id:"statistical-methods",children:"Statistical Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"correlation(col1_name: str, col2_name: str) -> float"}),(0,r.jsx)(s.p,{children:"Calculates the Pearson correlation between two numeric columns."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"col1_name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Name of the first column"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"col2_name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Name of the second column"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'corr = df.correlation("age", "salary")\nprint(f"Age-Salary correlation: {corr:.3f}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"covariance(col1_name: str, col2_name: str) -> float"}),(0,r.jsx)(s.p,{children:"Calculates the covariance between two numeric columns."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"col1_name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Name of the first column"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"col2_name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Name of the second column"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'cov = df.covariance("age", "salary")\nprint(f"Age-Salary covariance: {cov:.2f}")\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"joining",children:"Joining"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"join(other: PyDataFrame, on_column: str, join_type: PyJoinType) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Joins this DataFrame with another DataFrame."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"other"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"PyDataFrame"})," - DataFrame to join with"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"on_column"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Column name to join on"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"join_type"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"PyJoinType"})," - Type of join (Inner, Left, Right)"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'joined = df1.join(df2, "user_id", vx.PyJoinType.Inner)\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"sorting-and-ordering",children:"Sorting and Ordering"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"sort(by_columns: List[str], ascending: bool = True) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Sorts the DataFrame by specified columns."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"by_columns"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"List[str]"})," - Columns to sort by"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"ascending"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"bool"})," - Sort order (default: True)"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'sorted_df = df.sort(["age", "name"], ascending=True)\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"data-cleaning",children:"Data Cleaning"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"drop_nulls() -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Removes rows containing any null values."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"clean_df = df.drop_nulls()\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"fill_nulls(value: Any) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Fills null values with a specified value."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"value"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"Any"})," - Value to use for filling nulls"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'filled = df.fill_nulls(0)  # Fill with 0\nfilled_str = df.fill_nulls("Unknown")  # Fill with string\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"io-operations",children:"I/O Operations"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"to_csv(path: str) -> None"}),(0,r.jsx)(s.p,{children:"Writes the DataFrame to a CSV file."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"path"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Output file path"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'df.to_csv("output/results.csv")\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"concatenation",children:"Concatenation"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"append(other: PyDataFrame) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Appends another DataFrame vertically."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"other"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"PyDataFrame"})," - DataFrame to append"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"combined = df1.append(df2)\n"})})]}),"\n",(0,r.jsx)(s.h3,{id:"pygroupeddataframe",children:(0,r.jsx)(s.code,{children:"PyGroupedDataFrame"})}),"\n",(0,r.jsx)(s.p,{children:"Represents a grouped DataFrame for aggregation operations."}),"\n",(0,r.jsx)(s.h4,{id:"aggregation-methods",children:"Aggregation Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"sum() -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Calculates the sum for each group."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'grouped = df.group_by(["department"])\nsums = grouped.sum()\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"mean() -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Calculates the mean for each group."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"averages = grouped.mean()\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"count() -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Counts values for each group."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"counts = grouped.count()\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"min() -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Finds the minimum value for each group."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"minimums = grouped.min()\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"max() -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Finds the maximum value for each group."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"maximums = grouped.max()\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"agg(aggregations: List[Tuple[str, str]]) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Performs custom aggregations."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"aggregations"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"List[Tuple[str, str]]"})," - List of (column, aggregation_function) tuples"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'result = grouped.agg([\n    ("salary", "mean"),\n    ("age", "count"),\n    ("experience", "max")\n])\n'})})]}),"\n",(0,r.jsx)(s.h3,{id:"pyseries",children:(0,r.jsx)(s.code,{children:"PySeries"})}),"\n",(0,r.jsx)(s.p,{children:"Represents a single column of data."}),"\n",(0,r.jsx)(s.h4,{id:"constructors-1",children:"Constructors"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"PySeries(name: str, data: List[Any])"}),(0,r.jsx)(s.p,{children:"Creates a new Series with automatic type inference."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Name of the series"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"data"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"List[Any]"})," - List of values (supports None for nulls)"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# Integer series\nages = vx.PySeries("age", [25, 30, None, 35])\n\n# String series  \nnames = vx.PySeries("name", ["Alice", "Bob", None, "Charlie"])\n\n# Float series\nsalaries = vx.PySeries("salary", [50000.0, 75000.0, 60000.0])\n\n# Boolean series\nactive = vx.PySeries("is_active", [True, False, True])\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"properties-1",children:"Properties"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"name() -> str"}),(0,r.jsx)(s.p,{children:"Returns the name of the Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'print(f"Series name: {series.name()}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"len() -> int"}),(0,r.jsx)(s.p,{children:"Returns the length of the Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'print(f"Series has {series.len()} values")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"is_empty() -> bool"}),(0,r.jsx)(s.p,{children:"Checks if the Series is empty."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'if series.is_empty():\n    print("Series is empty")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"data_type() -> PyDataType"}),(0,r.jsx)(s.p,{children:"Returns the data type of the Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'dtype = series.data_type()\nprint(f"Series type: {dtype}")\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"data-access-1",children:"Data Access"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"get_value(index: int) -> Any"}),(0,r.jsx)(s.p,{children:"Gets the value at a specific index."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"index"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"int"})," - Index of the value to retrieve"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'first_value = series.get_value(0)\nprint(f"First value: {first_value}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"to_list() -> List[Any]"}),(0,r.jsx)(s.p,{children:"Converts the Series to a Python list."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"values = series.to_list()\nfor value in values:\n    if value is not None:\n        print(value)\n"})})]}),"\n",(0,r.jsx)(s.h4,{id:"statistical-methods-1",children:"Statistical Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"sum() -> float"}),(0,r.jsx)(s.p,{children:"Calculates the sum of numeric values."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'total = series.sum()\nprint(f"Sum: {total}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"mean() -> float"}),(0,r.jsx)(s.p,{children:"Calculates the mean of numeric values."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'average = series.mean()\nprint(f"Average: {average}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"median() -> float"}),(0,r.jsx)(s.p,{children:"Calculates the median of numeric values."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'median = series.median()\nprint(f"Median: {median}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"min() -> Any"}),(0,r.jsx)(s.p,{children:"Finds the minimum value."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'minimum = series.min()\nprint(f"Minimum: {minimum}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"max() -> Any"}),(0,r.jsx)(s.p,{children:"Finds the maximum value."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'maximum = series.max()\nprint(f"Maximum: {maximum}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"std() -> float"}),(0,r.jsx)(s.p,{children:"Calculates the standard deviation."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'std_dev = series.std()\nprint(f"Standard deviation: {std_dev}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"count() -> int"}),(0,r.jsx)(s.p,{children:"Counts non-null values."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'non_null_count = series.count()\nprint(f"Non-null values: {non_null_count}")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"unique() -> PySeries"}),(0,r.jsx)(s.p,{children:"Returns a Series with unique values."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'unique_values = series.unique()\nprint(f"Unique values: {unique_values.len()}")\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"data-manipulation-1",children:"Data Manipulation"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"filter(row_indices: List[int]) -> PySeries"}),(0,r.jsx)(s.p,{children:"Filters the Series by index positions."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"row_indices"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"List[int]"})," - List of indices to keep"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"filtered = series.filter([0, 2, 4])  # Keep indices 0, 2, 4\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"fill_nulls(value: Any) -> PySeries"}),(0,r.jsx)(s.p,{children:"Fills null values with a specified value."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"value"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"Any"})," - Value to use for filling nulls"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"filled = series.fill_nulls(0)\n"})})]}),"\n",(0,r.jsx)(s.h3,{id:"pyexpr",children:(0,r.jsx)(s.code,{children:"PyExpr"})}),"\n",(0,r.jsx)(s.p,{children:"Represents expressions for computed columns."}),"\n",(0,r.jsx)(s.h4,{id:"static-methods",children:"Static Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"@staticmethod column(name: str) -> PyExpr"}),(0,r.jsx)(s.p,{children:"Creates a column reference expression."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"str"})," - Name of the column to reference"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'expr = vx.PyExpr.column("salary")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"@staticmethod literal(value: Any) -> PyExpr"}),(0,r.jsx)(s.p,{children:"Creates a literal value expression."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"value"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"Any"})," - The literal value"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"expr = vx.PyExpr.literal(1000.0)\n"})})]}),"\n",(0,r.jsx)(s.h4,{id:"arithmetic-operations",children:"Arithmetic Operations"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"@staticmethod add(left: PyExpr, right: PyExpr) -> PyExpr"}),(0,r.jsx)(s.p,{children:"Creates an addition expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'expr = vx.PyExpr.add(\n    vx.PyExpr.column("base_salary"),\n    vx.PyExpr.column("bonus")\n)\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"@staticmethod subtract(left: PyExpr, right: PyExpr) -> PyExpr"}),(0,r.jsx)(s.p,{children:"Creates a subtraction expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'expr = vx.PyExpr.subtract(\n    vx.PyExpr.column("revenue"),\n    vx.PyExpr.column("costs")\n)\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"@staticmethod multiply(left: PyExpr, right: PyExpr) -> PyExpr"}),(0,r.jsx)(s.p,{children:"Creates a multiplication expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'expr = vx.PyExpr.multiply(\n    vx.PyExpr.column("quantity"),\n    vx.PyExpr.column("price")\n)\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"@staticmethod divide(left: PyExpr, right: PyExpr) -> PyExpr"}),(0,r.jsx)(s.p,{children:"Creates a division expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'expr = vx.PyExpr.divide(\n    vx.PyExpr.column("total_sales"),\n    vx.PyExpr.column("num_customers")\n)\n'})})]}),"\n",(0,r.jsx)(s.h3,{id:"pyjointype",children:(0,r.jsx)(s.code,{children:"PyJoinType"})}),"\n",(0,r.jsx)(s.p,{children:"Enumeration for join types."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'class PyJoinType:\n    Inner = "Inner"\n    Left = "Left" \n    Right = "Right"\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'joined = df1.join(df2, "user_id", vx.PyJoinType.Left)\n'})}),"\n",(0,r.jsx)(s.h2,{id:"convenience-functions",children:"Convenience Functions"}),"\n",(0,r.jsx)(s.h3,{id:"data-loading",children:"Data Loading"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"read_csv(path: str) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Convenience function to load CSV files."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import veloxx as vx\n\ndf = vx.read_csv("data.csv")\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"read_json(path: str) -> PyDataFrame"}),(0,r.jsx)(s.p,{children:"Convenience function to load JSON files."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'df = vx.read_json("data.json")\n'})})]}),"\n",(0,r.jsx)(s.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,r.jsx)(s.h3,{id:"basic-data-analysis",children:"Basic Data Analysis"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import veloxx as vx\n\n# Load data\ndf = vx.read_csv("sales_data.csv")\n\n# Basic info\nprint(f"Dataset: {df.row_count()} rows, {df.column_count()} columns")\nprint(f"Columns: {df.column_names()}")\n\n# Filter high-value sales\nhigh_value_indices = []\namount_series = df.get_column("amount")\nfor i, amount in enumerate(amount_series.to_list()):\n    if amount and amount > 1000:\n        high_value_indices.append(i)\n\nhigh_value_sales = df.filter(high_value_indices)\n\n# Group by and aggregate\nsummary = high_value_sales.group_by(["region"]).agg([\n    ("amount", "sum"),\n    ("amount", "mean"),\n    ("customer_id", "count")\n])\n\nprint(summary)\n'})}),"\n",(0,r.jsx)(s.h3,{id:"advanced-analytics",children:"Advanced Analytics"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import veloxx as vx\n\ndef analyze_customer_data():\n    # Load customer data\n    customers = vx.read_csv("customers.csv")\n    orders = vx.read_csv("orders.csv")\n    \n    # Join datasets\n    customer_orders = customers.join(orders, "customer_id", vx.PyJoinType.Inner)\n    \n    # Calculate customer lifetime value\n    clv_expr = vx.PyExpr.multiply(\n        vx.PyExpr.column("order_value"),\n        vx.PyExpr.column("order_frequency")\n    )\n    \n    with_clv = customer_orders.with_column("lifetime_value", clv_expr)\n    \n    # Segment customers\n    high_value_indices = []\n    clv_series = with_clv.get_column("lifetime_value")\n    for i, clv in enumerate(clv_series.to_list()):\n        if clv and clv > 5000:\n            high_value_indices.append(i)\n    \n    high_value_customers = with_clv.filter(high_value_indices)\n    \n    # Analyze by segment\n    segment_analysis = high_value_customers.group_by(["customer_segment"]).agg([\n        ("lifetime_value", "mean"),\n        ("order_frequency", "mean"),\n        ("customer_id", "count")\n    ])\n    \n    return segment_analysis\n\n# Run analysis\nresults = analyze_customer_data()\nprint(results)\n'})}),"\n",(0,r.jsx)(s.h3,{id:"data-cleaning-pipeline",children:"Data Cleaning Pipeline"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import veloxx as vx\n\ndef clean_dataset(df):\n    """Clean and prepare dataset for analysis"""\n    \n    # Remove rows with missing critical data\n    clean_df = df.drop_nulls()\n    \n    # Fill missing values in optional columns\n    filled_df = clean_df.fill_nulls("Unknown")\n    \n    # Remove outliers (example: ages > 100)\n    age_series = filled_df.get_column("age")\n    valid_indices = []\n    for i, age in enumerate(age_series.to_list()):\n        if age and 0 <= age <= 100:\n            valid_indices.append(i)\n    \n    filtered_df = filled_df.filter(valid_indices)\n    \n    # Standardize column names\n    standardized = filtered_df.rename_column("customer_name", "name")\n    standardized = standardized.rename_column("customer_age", "age")\n    \n    return standardized\n\n# Usage\nraw_data = vx.read_csv("raw_customer_data.csv")\nclean_data = clean_dataset(raw_data)\nclean_data.to_csv("clean_customer_data.csv")\n'})}),"\n",(0,r.jsx)(s.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Use appropriate data types"}),": Let Veloxx infer types automatically for best performance"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Filter early"}),": Apply filters before expensive operations like joins"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Use vectorized operations"}),": Leverage expressions instead of loops"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Process in chunks"}),": For very large datasets, process in smaller chunks"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Minimize data copying"}),": Chain operations when possible"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import veloxx as vx\n\ntry:\n    df = vx.read_csv("data.csv")\n    result = df.group_by(["category"]).mean()\n    result.to_csv("output.csv")\nexcept FileNotFoundError:\n    print("Input file not found")\nexcept Exception as e:\n    print(f"Error processing data: {e}")\n'})}),"\n",(0,r.jsx)(s.h2,{id:"integration-with-pandas",children:"Integration with Pandas"}),"\n",(0,r.jsx)(s.p,{children:"Convert between Veloxx and Pandas for interoperability:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import veloxx as vx\nimport pandas as pd\n\n# Pandas to Veloxx\ndef pandas_to_veloxx(pandas_df):\n    columns = {}\n    for col in pandas_df.columns:\n        data = pandas_df[col].tolist()\n        # Convert NaN to None\n        data = [None if pd.isna(x) else x for x in data]\n        columns[col] = vx.PySeries(col, data)\n    return vx.PyDataFrame(columns)\n\n# Veloxx to Pandas\ndef veloxx_to_pandas(veloxx_df):\n    data = {}\n    for col_name in veloxx_df.column_names():\n        series = veloxx_df.get_column(col_name)\n        data[col_name] = series.to_list()\n    return pd.DataFrame(data)\n\n# Usage\npandas_df = pd.read_csv("data.csv")\nveloxx_df = pandas_to_veloxx(pandas_df)\n\n# Process with Veloxx (faster)\nresult = veloxx_df.group_by(["category"]).mean()\n\n# Convert back to Pandas if needed\nresult_pandas = veloxx_to_pandas(result)\n'})})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>l,x:()=>c});var n=a(6540);const r={},i=n.createContext(r);function l(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);