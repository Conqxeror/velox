"use strict";(self.webpackChunkveloxx_docs=self.webpackChunkveloxx_docs||[]).push([[744],{8453:(e,s,a)=>{a.d(s,{R:()=>l,x:()=>c});var n=a(6540);const r={},i=n.createContext(r);function l(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:s},e.children)}},9510:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>t,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api/javascript","title":"JavaScript API Reference","description":"Complete API reference for Veloxx JavaScript/WebAssembly bindings.","source":"@site/docs/api/javascript.md","sourceDirName":"api","slug":"/api/javascript","permalink":"/veloxx/docs/api/javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/Conqxeror/veloxx/tree/main/docs-site/docs/api/javascript.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Python API Reference","permalink":"/veloxx/docs/api/python"},"next":{"title":"Performance Benchmarks","permalink":"/veloxx/docs/performance/benchmarks"}}');var r=a(4848),i=a(8453);const l={},c="JavaScript API Reference",t={},d=[{value:"Installation",id:"installation",level:2},{value:"Using npm",id:"using-npm",level:3},{value:"Using CDN",id:"using-cdn",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Core Classes",id:"core-classes",level:2},{value:"<code>WasmDataFrame</code>",id:"wasmdataframe",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Properties",id:"properties",level:4},{value:"Methods",id:"methods",level:4},{value:"Data Manipulation",id:"data-manipulation",level:4},{value:"Grouping and Aggregation",id:"grouping-and-aggregation",level:4},{value:"Statistical Methods",id:"statistical-methods",level:4},{value:"Data Cleaning",id:"data-cleaning",level:4},{value:"Concatenation",id:"concatenation",level:4},{value:"<code>WasmSeries</code>",id:"wasmseries",level:3},{value:"Constructor",id:"constructor-1",level:4},{value:"Properties",id:"properties-1",level:4},{value:"Methods",id:"methods-1",level:4},{value:"Statistical Methods",id:"statistical-methods-1",level:4},{value:"<code>WasmGroupedDataFrame</code>",id:"wasmgroupeddataframe",level:3},{value:"Methods",id:"methods-2",level:4},{value:"<code>WasmExpr</code>",id:"wasmexpr",level:3},{value:"Static Methods",id:"static-methods",level:4},{value:"Arithmetic Operations",id:"arithmetic-operations",level:4},{value:"Comparison Operations",id:"comparison-operations",level:4},{value:"Logical Operations",id:"logical-operations",level:4},{value:"<code>WasmValue</code>",id:"wasmvalue",level:3},{value:"Constructor",id:"constructor-2",level:4},{value:"Methods",id:"methods-3",level:4},{value:"<code>WasmDataType</code>",id:"wasmdatatype",level:3},{value:"Values",id:"values",level:4},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Complex Data Processing Pipeline",id:"complex-data-processing-pipeline",level:3},{value:"Working with Missing Data",id:"working-with-missing-data",level:3},{value:"Statistical Analysis",id:"statistical-analysis",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Browser Compatibility",id:"browser-compatibility",level:2},{value:"TypeScript Support",id:"typescript-support",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"javascript-api-reference",children:"JavaScript API Reference"})}),"\n",(0,r.jsx)(s.p,{children:"Complete API reference for Veloxx JavaScript/WebAssembly bindings."}),"\n",(0,r.jsx)(s.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(s.h3,{id:"using-npm",children:"Using npm"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"npm install veloxx-wasm\n"})}),"\n",(0,r.jsx)(s.h3,{id:"using-cdn",children:"Using CDN"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-html",children:'<script src="https://unpkg.com/veloxx-wasm/veloxx.js"><\/script>\n'})}),"\n",(0,r.jsx)(s.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'import * as veloxx from \'veloxx-wasm\';\n\n// Initialize the WASM module\nawait veloxx.default();\n\n// Create a DataFrame\nconst df = new veloxx.WasmDataFrame({\n    name: ["Alice", "Bob", "Charlie"],\n    age: [25, 30, 35],\n    salary: [50000.0, 75000.0, 60000.0]\n});\n\n// Basic operations\nconst filtered = df.filter([0, 2]); // Filter rows by indices\nconst selected = df.selectColumns(["name", "salary"]);\nconsole.log(`DataFrame has ${df.row_count} rows and ${df.column_count} columns`);\n'})}),"\n",(0,r.jsx)(s.h2,{id:"core-classes",children:"Core Classes"}),"\n",(0,r.jsx)(s.h3,{id:"wasmdataframe",children:(0,r.jsx)(s.code,{children:"WasmDataFrame"})}),"\n",(0,r.jsx)(s.p,{children:"The main data structure for working with tabular data in JavaScript."}),"\n",(0,r.jsx)(s.h4,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"new WasmDataFrame(columns: Object)"}),(0,r.jsx)(s.p,{children:"Creates a new DataFrame from an object where keys are column names and values are arrays of data."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"columns"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"Object"})," - Object mapping column names to data arrays"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const df = new veloxx.WasmDataFrame({\n    name: ["Alice", "Bob", "Charlie"],\n    age: [25, 30, 35],\n    active: [true, false, true],\n    salary: [50000.0, 75000.0, 60000.0]\n});\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"row_count: number"}),(0,r.jsx)(s.p,{children:"Returns the number of rows in the DataFrame."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"console.log(`DataFrame has ${df.row_count} rows`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"column_count: number"}),(0,r.jsx)(s.p,{children:"Returns the number of columns in the DataFrame."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"console.log(`DataFrame has ${df.column_count} columns`);\n"})})]}),"\n",(0,r.jsx)(s.h4,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"columnNames(): string[]"}),(0,r.jsx)(s.p,{children:"Returns an array of column names."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const names = df.columnNames();\nnames.forEach(name => console.log(`Column: ${name}`));\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"getColumn(name: string): WasmSeries | null"}),(0,r.jsx)(s.p,{children:"Gets a column by name."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Name of the column to retrieve"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const ageColumn = df.getColumn("age");\nif (ageColumn) {\n    console.log(`Age column has ${ageColumn.len} values`);\n}\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"data-manipulation",children:"Data Manipulation"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"filter(rowIndices: number[]): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Filters rows by index positions."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"rowIndices"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"number[]"})," - Array of row indices to keep"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"// Keep only rows 0 and 2\nconst filtered = df.filter([0, 2]);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"selectColumns(names: string[]): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Selects specific columns from the DataFrame."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"names"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string[]"})," - Names of columns to select"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const selected = df.selectColumns(["name", "age"]);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"dropColumns(names: string[]): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Removes specified columns from the DataFrame."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"names"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string[]"})," - Names of columns to drop"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const withoutId = df.dropColumns(["id"]);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"renameColumn(oldName: string, newName: string): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Renames a column in the DataFrame."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"oldName"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Current name of the column"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"newName"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - New name for the column"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const renamed = df.renameColumn("age", "years");\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"withColumn(name: string, expr: WasmExpr): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Adds a new column or replaces an existing one using an expression."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Name of the new column"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"expr"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmExpr"})," - Expression to compute the column values"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'// Add a column with salary + 1000 bonus\nconst salaryCol = veloxx.WasmExpr.column("salary");\nconst bonus = veloxx.WasmExpr.literal(new veloxx.WasmValue(1000.0));\nconst expr = veloxx.WasmExpr.add(salaryCol, bonus);\nconst withBonus = df.withColumn("salary_with_bonus", expr);\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"grouping-and-aggregation",children:"Grouping and Aggregation"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"groupBy(byColumns: string[]): WasmGroupedDataFrame"}),(0,r.jsx)(s.p,{children:"Groups the DataFrame by specified columns."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"byColumns"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string[]"})," - Columns to group by"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const grouped = df.groupBy(["department"]);\nconst result = grouped.agg([["salary", "mean"], ["age", "count"]]);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"describe(): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Generates descriptive statistics for numeric columns."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const stats = df.describe();\nconsole.log(stats);\n"})})]}),"\n",(0,r.jsx)(s.h4,{id:"statistical-methods",children:"Statistical Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"correlation(col1Name: string, col2Name: string): number"}),(0,r.jsx)(s.p,{children:"Calculates the Pearson correlation between two numeric columns."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"col1Name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Name of the first column"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"col2Name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Name of the second column"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const corr = df.correlation("age", "salary");\nconsole.log(`Age-Salary correlation: ${corr.toFixed(3)}`);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"covariance(col1Name: string, col2Name: string): number"}),(0,r.jsx)(s.p,{children:"Calculates the covariance between two numeric columns."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"col1Name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Name of the first column"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"col2Name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Name of the second column"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const cov = df.covariance("age", "salary");\nconsole.log(`Age-Salary covariance: ${cov.toFixed(2)}`);\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"data-cleaning",children:"Data Cleaning"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"dropNulls(): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Removes rows containing any null values."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const cleanDf = df.dropNulls();\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"fillNulls(value: WasmValue): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Fills null values with a specified value."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"value"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmValue"})," - Value to use for filling nulls"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const filled = df.fillNulls(new veloxx.WasmValue(0)); // Fill with 0\nconst filledStr = df.fillNulls(new veloxx.WasmValue("Unknown")); // Fill with string\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"concatenation",children:"Concatenation"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"append(other: WasmDataFrame): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Appends another DataFrame vertically."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"other"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmDataFrame"})," - DataFrame to append"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const combined = df1.append(df2);\n"})})]}),"\n",(0,r.jsx)(s.h3,{id:"wasmseries",children:(0,r.jsx)(s.code,{children:"WasmSeries"})}),"\n",(0,r.jsx)(s.p,{children:"Represents a single column of data with a specific type."}),"\n",(0,r.jsx)(s.h4,{id:"constructor-1",children:"Constructor"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"new WasmSeries(name: string, data: any[])"}),(0,r.jsx)(s.p,{children:"Creates a new Series with automatic type inference."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Name of the series"]})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"data"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"any[]"})," - Array of values"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const ages = new veloxx.WasmSeries("age", [25, 30, null, 35]);\nconst names = new veloxx.WasmSeries("name", ["Alice", "Bob", "Charlie"]);\nconst active = new veloxx.WasmSeries("active", [true, false, true]);\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"properties-1",children:"Properties"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"name: string"}),(0,r.jsx)(s.p,{children:"Returns the name of the Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"console.log(`Series name: ${series.name}`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"len: number"}),(0,r.jsx)(s.p,{children:"Returns the length of the Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"console.log(`Series has ${series.len} values`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"isEmpty: boolean"}),(0,r.jsx)(s.p,{children:"Returns true if the Series is empty."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'if (series.isEmpty) {\n    console.log("Series is empty");\n}\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"dataType: WasmDataType"}),(0,r.jsx)(s.p,{children:"Returns the data type of the Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"console.log(`Data type: ${series.dataType}`);\n"})})]}),"\n",(0,r.jsx)(s.h4,{id:"methods-1",children:"Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"getValue(index: number): any"}),(0,r.jsx)(s.p,{children:"Gets the value at the specified index."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"index"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"number"})," - Index position"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const value = series.getValue(0);\nconsole.log(`First value: ${value}`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"setName(newName: string): void"}),(0,r.jsx)(s.p,{children:"Sets a new name for the Series."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"newName"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - New name for the series"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'series.setName("new_column_name");\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"filter(rowIndices: number[]): WasmSeries"}),(0,r.jsx)(s.p,{children:"Filters the Series by index positions."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"rowIndices"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"number[]"})," - Array of indices to keep"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const filtered = series.filter([0, 2, 4]);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"cast(toType: WasmDataType): WasmSeries"}),(0,r.jsx)(s.p,{children:"Casts the Series to a different data type."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"toType"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmDataType"})," - Target data type"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const asFloat = series.cast(veloxx.WasmDataType.F64);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"append(other: WasmSeries): WasmSeries"}),(0,r.jsx)(s.p,{children:"Appends another Series to this one."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"other"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmSeries"})," - Series to append"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const combined = series1.append(series2);\n"})})]}),"\n",(0,r.jsx)(s.h4,{id:"statistical-methods-1",children:"Statistical Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"count(): number"}),(0,r.jsx)(s.p,{children:"Returns the count of non-null values."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const nonNullCount = series.count();\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"min(): any | null"}),(0,r.jsx)(s.p,{children:"Returns the minimum value in the Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const minValue = series.min();\nconsole.log(`Minimum: ${minValue}`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"max(): any | null"}),(0,r.jsx)(s.p,{children:"Returns the maximum value in the Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const maxValue = series.max();\nconsole.log(`Maximum: ${maxValue}`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"median(): number | null"}),(0,r.jsx)(s.p,{children:"Returns the median value for numeric Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const medianValue = series.median();\nconsole.log(`Median: ${medianValue}`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"stdDev(): number | null"}),(0,r.jsx)(s.p,{children:"Returns the standard deviation for numeric Series."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const stdDev = series.stdDev();\nconsole.log(`Standard Deviation: ${stdDev}`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"correlation(other: WasmSeries): number | null"}),(0,r.jsx)(s.p,{children:"Calculates the correlation with another numeric Series."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"other"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmSeries"})," - Other series to correlate with"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const corr = ageSeries.correlation(salarySeries);\nconsole.log(`Correlation: ${corr}`);\n"})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"covariance(other: WasmSeries): number | null"}),(0,r.jsx)(s.p,{children:"Calculates the covariance with another numeric Series."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"other"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmSeries"})," - Other series to calculate covariance with"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const cov = ageSeries.covariance(salarySeries);\nconsole.log(`Covariance: ${cov}`);\n"})})]}),"\n",(0,r.jsx)(s.h3,{id:"wasmgroupeddataframe",children:(0,r.jsx)(s.code,{children:"WasmGroupedDataFrame"})}),"\n",(0,r.jsx)(s.p,{children:"Represents a grouped DataFrame for aggregation operations."}),"\n",(0,r.jsx)(s.h4,{id:"methods-2",children:"Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"agg(aggregations: [string, string][]): WasmDataFrame"}),(0,r.jsx)(s.p,{children:"Performs aggregation operations on grouped data."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"aggregations"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"[string, string][]"})," - Array of [column, operation] pairs"]})})]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Available operations:"})," ",(0,r.jsx)(s.code,{children:'"sum"'}),", ",(0,r.jsx)(s.code,{children:'"mean"'}),", ",(0,r.jsx)(s.code,{children:'"count"'}),", ",(0,r.jsx)(s.code,{children:'"min"'}),", ",(0,r.jsx)(s.code,{children:'"max"'}),", ",(0,r.jsx)(s.code,{children:'"std"'})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const grouped = df.groupBy(["department"]);\nconst result = grouped.agg([\n    ["salary", "mean"],\n    ["age", "count"],\n    ["bonus", "sum"]\n]);\n'})})]}),"\n",(0,r.jsx)(s.h3,{id:"wasmexpr",children:(0,r.jsx)(s.code,{children:"WasmExpr"})}),"\n",(0,r.jsx)(s.p,{children:"Represents expressions for creating computed columns."}),"\n",(0,r.jsx)(s.h4,{id:"static-methods",children:"Static Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.column(name: string): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates an expression that references a column."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"name"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"string"})," - Column name"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const ageExpr = veloxx.WasmExpr.column("age");\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.literal(value: WasmValue): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates an expression with a literal value."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"value"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmValue"})," - Literal value"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const literalExpr = veloxx.WasmExpr.literal(new veloxx.WasmValue(100));\n"})})]}),"\n",(0,r.jsx)(s.h4,{id:"arithmetic-operations",children:"Arithmetic Operations"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.add(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates an addition expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const sum = veloxx.WasmExpr.add(\n    veloxx.WasmExpr.column("salary"),\n    veloxx.WasmExpr.literal(new veloxx.WasmValue(1000))\n);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.subtract(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a subtraction expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const diff = veloxx.WasmExpr.subtract(\n    veloxx.WasmExpr.column("revenue"),\n    veloxx.WasmExpr.column("cost")\n);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.multiply(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a multiplication expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const product = veloxx.WasmExpr.multiply(\n    veloxx.WasmExpr.column("price"),\n    veloxx.WasmExpr.column("quantity")\n);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.divide(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a division expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const ratio = veloxx.WasmExpr.divide(\n    veloxx.WasmExpr.column("profit"),\n    veloxx.WasmExpr.column("revenue")\n);\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"comparison-operations",children:"Comparison Operations"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.equals(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates an equality comparison expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const isActive = veloxx.WasmExpr.equals(\n    veloxx.WasmExpr.column("status"),\n    veloxx.WasmExpr.literal(new veloxx.WasmValue("active"))\n);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.notEquals(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a not-equals comparison expression."})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.greaterThan(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a greater-than comparison expression."})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.lessThan(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a less-than comparison expression."})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.greaterThanOrEqual(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a greater-than-or-equal comparison expression."})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.lessThanOrEqual(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a less-than-or-equal comparison expression."})]}),"\n",(0,r.jsx)(s.h4,{id:"logical-operations",children:"Logical Operations"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.and(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a logical AND expression."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const condition = veloxx.WasmExpr.and(\n    veloxx.WasmExpr.greaterThan(\n        veloxx.WasmExpr.column("age"),\n        veloxx.WasmExpr.literal(new veloxx.WasmValue(25))\n    ),\n    veloxx.WasmExpr.equals(\n        veloxx.WasmExpr.column("department"),\n        veloxx.WasmExpr.literal(new veloxx.WasmValue("Engineering"))\n    )\n);\n'})})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.or(left: WasmExpr, right: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a logical OR expression."})]}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"WasmExpr.not(expr: WasmExpr): WasmExpr"}),(0,r.jsx)(s.p,{children:"Creates a logical NOT expression."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"expr"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"WasmExpr"})," - Expression to negate"]})})]})]}),"\n",(0,r.jsx)(s.h3,{id:"wasmvalue",children:(0,r.jsx)(s.code,{children:"WasmValue"})}),"\n",(0,r.jsx)(s.p,{children:"Represents a typed value that can be used in expressions and operations."}),"\n",(0,r.jsx)(s.h4,{id:"constructor-2",children:"Constructor"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"new WasmValue(value: any)"}),(0,r.jsx)(s.p,{children:"Creates a new WasmValue with automatic type inference."}),(0,r.jsxs)("div",{className:"api-parameters",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Parameters:"})}),(0,r.jsx)("div",{className:"api-parameter",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)("span",{className:"parameter-name",children:"value"}),": ",(0,r.jsx)("span",{className:"parameter-type",children:"any"})," - JavaScript value (number, string, boolean, null)"]})})]}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'const intValue = new veloxx.WasmValue(42);\nconst floatValue = new veloxx.WasmValue(3.14);\nconst stringValue = new veloxx.WasmValue("hello");\nconst boolValue = new veloxx.WasmValue(true);\nconst nullValue = new veloxx.WasmValue(null);\n'})})]}),"\n",(0,r.jsx)(s.h4,{id:"methods-3",children:"Methods"}),"\n",(0,r.jsxs)("div",{className:"api-section",children:[(0,r.jsx)("div",{className:"api-method",children:"toJsValue(): any"}),(0,r.jsx)(s.p,{children:"Converts the WasmValue back to a JavaScript value."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const wasmVal = new veloxx.WasmValue(42);\nconst jsVal = wasmVal.toJsValue(); // Returns 42\n"})})]}),"\n",(0,r.jsx)(s.h3,{id:"wasmdatatype",children:(0,r.jsx)(s.code,{children:"WasmDataType"})}),"\n",(0,r.jsx)(s.p,{children:"Enumeration of supported data types."}),"\n",(0,r.jsx)(s.h4,{id:"values",children:"Values"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"WasmDataType.I32"})," - 32-bit signed integer"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"WasmDataType.F64"})," - 64-bit floating point"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"WasmDataType.Bool"})," - Boolean"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"WasmDataType.String"})," - String"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"WasmDataType.DateTime"})," - DateTime (stored as timestamp)"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'// Check data type\nif (series.dataType === veloxx.WasmDataType.F64) {\n    console.log("This is a numeric series");\n}\n\n// Cast to different type\nconst asString = series.cast(veloxx.WasmDataType.String);\n'})}),"\n",(0,r.jsx)(s.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,r.jsx)(s.h3,{id:"complex-data-processing-pipeline",children:"Complex Data Processing Pipeline"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'import * as veloxx from \'veloxx-wasm\';\n\n// Initialize WASM\nawait veloxx.default();\n\n// Create sample data\nconst df = new veloxx.WasmDataFrame({\n    employee_id: [1, 2, 3, 4, 5],\n    name: ["Alice", "Bob", "Charlie", "Diana", "Eve"],\n    department: ["Engineering", "Sales", "Engineering", "HR", "Sales"],\n    salary: [75000, 65000, 80000, 60000, 70000],\n    years_experience: [5, 3, 7, 2, 4],\n    performance_score: [4.2, 3.8, 4.5, 3.9, 4.1]\n});\n\n// Calculate salary per year of experience\nconst salaryPerYear = veloxx.WasmExpr.divide(\n    veloxx.WasmExpr.column("salary"),\n    veloxx.WasmExpr.column("years_experience")\n);\nconst enriched = df.withColumn("salary_per_year", salaryPerYear);\n\n// Filter high performers (score > 4.0)\nconst highPerformers = enriched.filter(\n    enriched.getColumn("performance_score")\n        .filter([0, 2, 4]) // Indices where score > 4.0\n);\n\n// Group by department and calculate statistics\nconst departmentStats = highPerformers\n    .groupBy(["department"])\n    .agg([\n        ["salary", "mean"],\n        ["years_experience", "mean"],\n        ["performance_score", "mean"]\n    ]);\n\nconsole.log(`High performer statistics by department:`);\nconsole.log(departmentStats);\n'})}),"\n",(0,r.jsx)(s.h3,{id:"working-with-missing-data",children:"Working with Missing Data"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'// Create DataFrame with null values\nconst dfWithNulls = new veloxx.WasmDataFrame({\n    id: [1, 2, 3, 4, 5],\n    value: [10.5, null, 15.2, null, 20.1],\n    category: ["A", "B", null, "A", "B"]\n});\n\n// Option 1: Drop rows with any null values\nconst cleanDf = dfWithNulls.dropNulls();\n\n// Option 2: Fill nulls with specific values\nconst filledDf = dfWithNulls\n    .fillNulls(new veloxx.WasmValue(0))  // Fill numeric nulls with 0\n    .fillNulls(new veloxx.WasmValue("Unknown")); // Fill string nulls\n\n// Option 3: Fill nulls per column type\nconst valueFilled = dfWithNulls.fillNulls(new veloxx.WasmValue(-1));\nconst categoryFilled = valueFilled.fillNulls(new veloxx.WasmValue("Missing"));\n'})}),"\n",(0,r.jsx)(s.h3,{id:"statistical-analysis",children:"Statistical Analysis"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'// Create sample dataset\nconst salesData = new veloxx.WasmDataFrame({\n    month: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],\n    revenue: [100000, 120000, 95000, 130000, 140000, 125000],\n    costs: [60000, 70000, 55000, 75000, 80000, 70000],\n    customers: [1000, 1200, 950, 1300, 1400, 1250]\n});\n\n// Calculate profit\nconst profit = veloxx.WasmExpr.subtract(\n    veloxx.WasmExpr.column("revenue"),\n    veloxx.WasmExpr.column("costs")\n);\nconst withProfit = salesData.withColumn("profit", profit);\n\n// Calculate correlations\nconst revenueCustomerCorr = withProfit.correlation("revenue", "customers");\nconst profitRevenueCorr = withProfit.correlation("profit", "revenue");\n\nconsole.log(`Revenue-Customer correlation: ${revenueCustomerCorr.toFixed(3)}`);\nconsole.log(`Profit-Revenue correlation: ${profitRevenueCorr.toFixed(3)}`);\n\n// Generate descriptive statistics\nconst stats = withProfit.describe();\nconsole.log("Descriptive Statistics:");\nconsole.log(stats);\n'})}),"\n",(0,r.jsx)(s.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(s.p,{children:"All methods that can fail return JavaScript promises or throw exceptions. Always wrap operations in try-catch blocks:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'try {\n    const df = new veloxx.WasmDataFrame({\n        invalid_data: [1, "string", true] // Mixed types\n    });\n    \n    const result = df.selectColumns(["nonexistent_column"]);\n} catch (error) {\n    console.error("Operation failed:", error.message);\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Batch Operations"}),": Combine multiple operations into a single chain when possible"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Avoid Frequent Type Conversions"}),": Keep data in consistent types"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Use Appropriate Data Types"}),": Choose the most specific type for your data"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Filter Early"}),": Apply filters before expensive operations like grouping"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Reuse Expressions"}),": Store complex expressions in variables for reuse"]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:'// Good: Chain operations\nconst result = df\n    .filter([0, 1, 2])\n    .selectColumns(["name", "salary"])\n    .groupBy(["department"])\n    .agg([["salary", "mean"]]);\n\n// Good: Reuse expressions\nconst salaryExpr = veloxx.WasmExpr.column("salary");\nconst bonusExpr = veloxx.WasmExpr.literal(new veloxx.WasmValue(1000));\nconst totalComp = veloxx.WasmExpr.add(salaryExpr, bonusExpr);\n'})}),"\n",(0,r.jsx)(s.h2,{id:"browser-compatibility",children:"Browser Compatibility"}),"\n",(0,r.jsx)(s.p,{children:"Veloxx WebAssembly bindings are compatible with:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Chrome/Edge"}),": 57+"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Firefox"}),": 52+"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Safari"}),": 11+"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Node.js"}),": 12+"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"For older browsers, consider using a WebAssembly polyfill."}),"\n",(0,r.jsx)(s.h2,{id:"typescript-support",children:"TypeScript Support"}),"\n",(0,r.jsx)(s.p,{children:"Type definitions are included with the package:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:'import * as veloxx from \'veloxx-wasm\';\n\ninterface EmployeeData {\n    name: string[];\n    age: number[];\n    salary: number[];\n}\n\nconst data: EmployeeData = {\n    name: ["Alice", "Bob"],\n    age: [30, 25],\n    salary: [75000, 65000]\n};\n\nconst df: veloxx.WasmDataFrame = new veloxx.WasmDataFrame(data);\n'})})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);