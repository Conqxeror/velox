"use strict";(self.webpackChunkveloxx_docs=self.webpackChunkveloxx_docs||[]).push([[324],{633:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"getting-started/quick-start","title":"Quick Start Guide","description":"Get up and running with Veloxx in just 5 minutes! This guide will walk you through the essential concepts and operations.","source":"@site/docs/getting-started/quick-start.md","sourceDirName":"getting-started","slug":"/getting-started/quick-start","permalink":"/veloxx/docs/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/Conqxeror/veloxx/tree/main/docs-site/docs/getting-started/quick-start.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/veloxx/docs/getting-started/installation"},"next":{"title":"Rust API Reference","permalink":"/veloxx/docs/api/rust"}}');var s=r(4848),t=r(8453),l=r(1470),i=r(9365);const o={},c="Quick Start Guide",d={},u=[{value:"What is Veloxx?",id:"what-is-veloxx",level:2},{value:"Choose Your Language",id:"choose-your-language",level:2},{value:"Installation",id:"installation",level:3},{value:"Your First DataFrame",id:"your-first-dataframe",level:3},{value:"Basic Operations",id:"basic-operations",level:3},{value:"Installation",id:"installation-1",level:3},{value:"Your First DataFrame",id:"your-first-dataframe-1",level:3},{value:"Basic Operations",id:"basic-operations-1",level:3},{value:"Installation",id:"installation-2",level:3},{value:"Your First DataFrame",id:"your-first-dataframe-2",level:3},{value:"Basic Operations",id:"basic-operations-2",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"DataFrames",id:"dataframes",level:3},{value:"Series",id:"series",level:3},{value:"Expressions",id:"expressions",level:3},{value:"Common Operations",id:"common-operations",level:2},{value:"Loading Data",id:"loading-data",level:3},{value:"Filtering Data",id:"filtering-data",level:3},{value:"Grouping and Aggregation",id:"grouping-and-aggregation",level:3},{value:"Adding Computed Columns",id:"adding-computed-columns",level:3},{value:"Real-World Example",id:"real-world-example",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Data Pipeline",id:"data-pipeline",level:3},{value:"Error Handling",id:"error-handling",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quick-start-guide",children:"Quick Start Guide"})}),"\n",(0,s.jsx)(n.p,{children:"Get up and running with Veloxx in just 5 minutes! This guide will walk you through the essential concepts and operations."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-veloxx",children:"What is Veloxx?"}),"\n",(0,s.jsxs)(n.p,{children:["Veloxx is a ",(0,s.jsx)(n.strong,{children:"high-performance data processing library"})," that provides:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,s.jsx)(n.strong,{children:"10x faster"})," operations than pandas"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83e\udeb6 ",(0,s.jsx)(n.strong,{children:"Minimal memory footprint"})]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83c\udf10 ",(0,s.jsx)(n.strong,{children:"Multi-language support"})," (Rust, Python, JavaScript)"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udee1\ufe0f ",(0,s.jsx)(n.strong,{children:"Memory safety"})," with zero runtime overhead"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"choose-your-language",children:"Choose Your Language"}),"\n","\n",(0,s.jsxs)(l.A,{children:[(0,s.jsxs)(i.A,{value:"rust",label:"Rust",children:[(0,s.jsx)(n.h3,{id:"installation",children:"Installation"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'[dependencies]\r\nveloxx = "0.2.4"\n'})}),(0,s.jsx)(n.h3,{id:"your-first-dataframe",children:"Your First DataFrame"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use veloxx::prelude::*;\r\nuse std::collections::BTreeMap;\r\n\r\nfn main() -> Result<(), Box<dyn std::error::Error>> {\r\n    // Create a DataFrame\r\n    let mut columns = BTreeMap::new();\r\n    columns.insert("name".to_string(), Series::new_string("name", vec![\r\n        Some("Alice".to_string()),\r\n        Some("Bob".to_string()),\r\n        Some("Charlie".to_string()),\r\n    ]));\r\n    columns.insert("age".to_string(), Series::new_i32("age", vec![\r\n        Some(25), Some(30), Some(35)\r\n    ]));\r\n    columns.insert("salary".to_string(), Series::new_f64("salary", vec![\r\n        Some(50000.0), Some(75000.0), Some(60000.0)\r\n    ]));\r\n    \r\n    let df = DataFrame::new(columns)?;\r\n    println!("DataFrame:\\n{}", df);\r\n    \r\n    Ok(())\r\n}\n'})}),(0,s.jsx)(n.h3,{id:"basic-operations",children:"Basic Operations"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Filter rows\r\nlet condition = Condition::Gt("age".to_string(), Value::I32(25));\r\nlet filtered = df.filter(&condition)?;\r\n\r\n// Select columns\r\nlet selected = df.select_columns(vec!["name".to_string(), "salary".to_string()])?;\r\n\r\n// Add computed column\r\nlet bonus_expr = Expr::Multiply(\r\n    Box::new(Expr::Column("salary".to_string())),\r\n    Box::new(Expr::Literal(Value::F64(0.1)))\r\n);\r\nlet with_bonus = df.with_column("bonus", &bonus_expr)?;\r\n\r\n// Group by and aggregate\r\nlet summary = df.group_by(vec!["department".to_string()])?\r\n    .agg(vec![("salary", "mean"), ("age", "count")])?;\n'})})]}),(0,s.jsxs)(i.A,{value:"python",label:"Python",children:[(0,s.jsx)(n.h3,{id:"installation-1",children:"Installation"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install veloxx\n"})}),(0,s.jsx)(n.h3,{id:"your-first-dataframe-1",children:"Your First DataFrame"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import veloxx as vx\r\n\r\n# Create a DataFrame\r\ndf = vx.PyDataFrame({\r\n    "name": vx.PySeries("name", ["Alice", "Bob", "Charlie"]),\r\n    "age": vx.PySeries("age", [25, 30, 35]),\r\n    "salary": vx.PySeries("salary", [50000.0, 75000.0, 60000.0])\r\n})\r\n\r\nprint("DataFrame:")\r\nprint(df)\n'})}),(0,s.jsx)(n.h3,{id:"basic-operations-1",children:"Basic Operations"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Filter rows (age > 25)\r\nage_series = df.get_column("age")\r\nindices = [i for i, age in enumerate(age_series.to_list()) if age and age > 25]\r\nfiltered = df.filter(indices)\r\n\r\n# Select columns\r\nselected = df.select_columns(["name", "salary"])\r\n\r\n# Add computed column\r\nbonus_expr = vx.PyExpr.multiply(\r\n    vx.PyExpr.column("salary"),\r\n    vx.PyExpr.literal(0.1)\r\n)\r\nwith_bonus = df.with_column("bonus", bonus_expr)\r\n\r\n# Group by and aggregate\r\ngrouped = df.group_by(["department"])\r\nsummary = grouped.agg([("salary", "mean"), ("age", "count")])\n'})})]}),(0,s.jsxs)(i.A,{value:"javascript",label:"JavaScript",children:[(0,s.jsx)(n.h3,{id:"installation-2",children:"Installation"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install veloxx\n"})}),(0,s.jsx)(n.h3,{id:"your-first-dataframe-2",children:"Your First DataFrame"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const vx = require(\'veloxx\');\r\n\r\nasync function main() {\r\n    // Initialize WASM\r\n    await vx.init();\r\n    \r\n    // Create a DataFrame\r\n    const df = new vx.WasmDataFrame({\r\n        name: ["Alice", "Bob", "Charlie"],\r\n        age: [25, 30, 35],\r\n        salary: [50000.0, 75000.0, 60000.0]\r\n    });\r\n    \r\n    console.log("DataFrame created!");\r\n    console.log(`Rows: ${df.rowCount}, Columns: ${df.columnCount}`);\r\n}\r\n\r\nmain().catch(console.error);\n'})}),(0,s.jsx)(n.h3,{id:"basic-operations-2",children:"Basic Operations"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Filter rows (age > 25)\r\nconst ageColumn = df.getColumn("age");\r\nconst indices = [];\r\nfor (let i = 0; i < ageColumn.len; i++) {\r\n    if (ageColumn.getValue(i) > 25) {\r\n        indices.push(i);\r\n    }\r\n}\r\nconst filtered = df.filter(new Uint32Array(indices));\r\n\r\n// Add computed column\r\nconst bonusExpr = vx.WasmExpr.multiply(\r\n    vx.WasmExpr.column("salary"),\r\n    vx.WasmExpr.literal(new vx.WasmValue(0.1))\r\n);\r\nconst withBonus = df.withColumn("bonus", bonusExpr);\r\n\r\n// Aggregate operations\r\nconst salaryColumn = df.getColumn("salary");\r\nconsole.log(`Average salary: ${salaryColumn.mean()}`);\r\nconsole.log(`Total salary: ${salaryColumn.sum()}`);\n'})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"dataframes",children:"DataFrames"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"DataFrame"})," is a 2D table with labeled columns, similar to a spreadsheet or SQL table."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Rust example\r\nlet df = DataFrame::from_csv("employees.csv")?;\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Python example\r\ndf = vx.read_csv("employees.csv")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"series",children:"Series"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"Series"})," is a single column of data with a specific type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Rust example\r\nlet ages = Series::new_i32("age", vec![Some(25), Some(30), None]);\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Python example\r\nages = vx.PySeries("age", [25, 30, None])\n'})}),"\n",(0,s.jsx)(n.h3,{id:"expressions",children:"Expressions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Expressions"})," define computations for creating new columns."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Rust example\r\nlet total = Expr::Add(\r\n    Box::new(Expr::Column("base".to_string())),\r\n    Box::new(Expr::Column("bonus".to_string()))\r\n);\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Python example\r\ntotal = vx.PyExpr.add(\r\n    vx.PyExpr.column("base"),\r\n    vx.PyExpr.column("bonus")\r\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-operations",children:"Common Operations"}),"\n",(0,s.jsx)(n.h3,{id:"loading-data",children:"Loading Data"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"rust",label:"Rust",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// From CSV\r\nlet df = DataFrame::from_csv("data.csv")?;\r\n\r\n// From JSON\r\nlet df = DataFrame::from_json("data.json")?;\r\n\r\n// From vectors\r\nlet data = vec![\r\n    vec!["Alice".to_string(), "25".to_string()],\r\n    vec!["Bob".to_string(), "30".to_string()],\r\n];\r\nlet columns = vec!["name".to_string(), "age".to_string()];\r\nlet df = DataFrame::from_vec_of_vec(data, columns)?;\n'})})}),(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# From CSV\r\ndf = vx.read_csv("data.csv")\r\n\r\n# From JSON\r\ndf = vx.read_json("data.json")\r\n\r\n# From dictionary\r\ndf = vx.PyDataFrame({\r\n    "name": vx.PySeries("name", ["Alice", "Bob"]),\r\n    "age": vx.PySeries("age", [25, 30])\r\n})\n'})})}),(0,s.jsx)(i.A,{value:"javascript",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// From arrays\r\nconst df = new vx.WasmDataFrame({\r\n    name: ["Alice", "Bob"],\r\n    age: [25, 30]\r\n});\r\n\r\n// Note: CSV/JSON loading in browser requires fetch\r\nasync function loadCsv(url) {\r\n    const response = await fetch(url);\r\n    const text = await response.text();\r\n    // Parse CSV text and create DataFrame\r\n}\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"filtering-data",children:"Filtering Data"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"rust",label:"Rust",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Simple condition\r\nlet condition = Condition::Gt("age".to_string(), Value::I32(25));\r\nlet filtered = df.filter(&condition)?;\r\n\r\n// Complex condition\r\nlet complex = Condition::And(\r\n    Box::new(Condition::Gt("age".to_string(), Value::I32(25))),\r\n    Box::new(Condition::Lt("age".to_string(), Value::I32(65)))\r\n);\r\nlet working_age = df.filter(&complex)?;\n'})})}),(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Filter by condition\r\nage_series = df.get_column("age")\r\nindices = [i for i, age in enumerate(age_series.to_list()) \r\n           if age and age > 25]\r\nfiltered = df.filter(indices)\r\n\r\n# Multiple conditions\r\nindices = [i for i, age in enumerate(age_series.to_list()) \r\n           if age and 25 < age < 65]\r\nworking_age = df.filter(indices)\n'})})}),(0,s.jsx)(i.A,{value:"javascript",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Filter by condition\r\nconst ageColumn = df.getColumn("age");\r\nconst indices = [];\r\nfor (let i = 0; i < ageColumn.len; i++) {\r\n    const age = ageColumn.getValue(i);\r\n    if (age > 25 && age < 65) {\r\n        indices.push(i);\r\n    }\r\n}\r\nconst workingAge = df.filter(new Uint32Array(indices));\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"grouping-and-aggregation",children:"Grouping and Aggregation"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"rust",label:"Rust",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Group by single column\r\nlet grouped = df.group_by(vec!["department".to_string()])?;\r\nlet summary = grouped.agg(vec![("salary", "mean")])?;\r\n\r\n// Group by multiple columns\r\nlet grouped = df.group_by(vec!["department".to_string(), "level".to_string()])?;\r\nlet detailed = grouped.agg(vec![\r\n    ("salary", "mean"),\r\n    ("salary", "count"),\r\n    ("age", "max")\r\n])?;\n'})})}),(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Group by single column\r\ngrouped = df.group_by(["department"])\r\nsummary = grouped.mean()\r\n\r\n# Custom aggregations\r\nsummary = grouped.agg([\r\n    ("salary", "mean"),\r\n    ("salary", "count"),\r\n    ("age", "max")\r\n])\n'})})}),(0,s.jsx)(i.A,{value:"javascript",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Group by and aggregate\r\nconst grouped = df.groupBy(["department"]);\r\nconst summary = grouped.agg([\r\n    ["salary", "mean"],\r\n    ["salary", "count"]\r\n]);\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"adding-computed-columns",children:"Adding Computed Columns"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"rust",label:"Rust",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Simple arithmetic\r\nlet bonus_expr = Expr::Multiply(\r\n    Box::new(Expr::Column("salary".to_string())),\r\n    Box::new(Expr::Literal(Value::F64(0.1)))\r\n);\r\nlet with_bonus = df.with_column("bonus", &bonus_expr)?;\r\n\r\n// Complex expression\r\nlet total_comp = Expr::Add(\r\n    Box::new(Expr::Column("salary".to_string())),\r\n    Box::new(Expr::Column("bonus".to_string()))\r\n);\r\nlet with_total = with_bonus.with_column("total_compensation", &total_comp)?;\n'})})}),(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Simple arithmetic\r\nbonus_expr = vx.PyExpr.multiply(\r\n    vx.PyExpr.column("salary"),\r\n    vx.PyExpr.literal(0.1)\r\n)\r\nwith_bonus = df.with_column("bonus", bonus_expr)\r\n\r\n# Complex expression\r\ntotal_expr = vx.PyExpr.add(\r\n    vx.PyExpr.column("salary"),\r\n    vx.PyExpr.column("bonus")\r\n)\r\nwith_total = with_bonus.with_column("total_compensation", total_expr)\n'})})}),(0,s.jsx)(i.A,{value:"javascript",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Simple arithmetic\r\nconst bonusExpr = vx.WasmExpr.multiply(\r\n    vx.WasmExpr.column("salary"),\r\n    vx.WasmExpr.literal(new vx.WasmValue(0.1))\r\n);\r\nconst withBonus = df.withColumn("bonus", bonusExpr);\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"real-world-example",children:"Real-World Example"}),"\n",(0,s.jsx)(n.p,{children:"Let's analyze employee data to find insights:"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(i.A,{value:"rust",label:"Rust",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use veloxx::prelude::*;\r\n\r\nfn analyze_employees() -> Result<(), Box<dyn std::error::Error>> {\r\n    // Load employee data\r\n    let df = DataFrame::from_csv("employees.csv")?;\r\n    \r\n    println!("Dataset overview:");\r\n    println!("Rows: {}, Columns: {}", df.row_count(), df.column_count());\r\n    \r\n    // Calculate statistics\r\n    let stats = df.describe()?;\r\n    println!("Statistics:\\n{}", stats);\r\n    \r\n    // Find high performers (salary > 70k)\r\n    let high_performers = df.filter(&Condition::Gt(\r\n        "salary".to_string(), \r\n        Value::F64(70000.0)\r\n    ))?;\r\n    \r\n    // Analyze by department\r\n    let dept_analysis = df\r\n        .group_by(vec!["department".to_string()])?\r\n        .agg(vec![\r\n            ("salary", "mean"),\r\n            ("salary", "count"),\r\n            ("age", "mean")\r\n        ])?;\r\n    \r\n    println!("Department Analysis:\\n{}", dept_analysis);\r\n    \r\n    // Calculate salary bands\r\n    let salary_band_expr = Expr::Divide(\r\n        Box::new(Expr::Column("salary".to_string())),\r\n        Box::new(Expr::Literal(Value::F64(10000.0)))\r\n    );\r\n    \r\n    let with_bands = df.with_column("salary_band", &salary_band_expr)?;\r\n    \r\n    // Export results\r\n    dept_analysis.to_csv("department_analysis.csv")?;\r\n    high_performers.to_csv("high_performers.csv")?;\r\n    \r\n    Ok(())\r\n}\n'})})}),(0,s.jsx)(i.A,{value:"python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import veloxx as vx\r\n\r\ndef analyze_employees():\r\n    # Load employee data\r\n    df = vx.read_csv("employees.csv")\r\n    \r\n    print(f"Dataset overview:")\r\n    print(f"Rows: {df.row_count()}, Columns: {df.column_count()}")\r\n    \r\n    # Calculate statistics\r\n    stats = df.describe()\r\n    print(f"Statistics:\\n{stats}")\r\n    \r\n    # Find high performers (salary > 70k)\r\n    salary_series = df.get_column("salary")\r\n    high_perf_indices = [\r\n        i for i, salary in enumerate(salary_series.to_list())\r\n        if salary and salary > 70000\r\n    ]\r\n    high_performers = df.filter(high_perf_indices)\r\n    \r\n    # Analyze by department\r\n    dept_analysis = df.group_by(["department"]).agg([\r\n        ("salary", "mean"),\r\n        ("salary", "count"),\r\n        ("age", "mean")\r\n    ])\r\n    \r\n    print(f"Department Analysis:\\n{dept_analysis}")\r\n    \r\n    # Calculate salary bands\r\n    salary_band_expr = vx.PyExpr.divide(\r\n        vx.PyExpr.column("salary"),\r\n        vx.PyExpr.literal(10000.0)\r\n    )\r\n    \r\n    with_bands = df.with_column("salary_band", salary_band_expr)\r\n    \r\n    # Export results\r\n    dept_analysis.to_csv("department_analysis.csv")\r\n    high_performers.to_csv("high_performers.csv")\r\n\r\n# Run analysis\r\nanalyze_employees()\n'})})}),(0,s.jsx)(i.A,{value:"javascript",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const vx = require(\'veloxx\');\r\n\r\nasync function analyzeEmployees() {\r\n    await vx.init();\r\n    \r\n    // Create sample data (in real app, load from file)\r\n    const df = new vx.WasmDataFrame({\r\n        name: ["Alice", "Bob", "Charlie", "Diana"],\r\n        department: ["Engineering", "Sales", "Engineering", "Marketing"],\r\n        salary: [75000, 65000, 80000, 70000],\r\n        age: [28, 32, 26, 30]\r\n    });\r\n    \r\n    console.log(`Dataset: ${df.rowCount} rows, ${df.columnCount} columns`);\r\n    \r\n    // Find high performers\r\n    const salaryColumn = df.getColumn("salary");\r\n    const highPerfIndices = [];\r\n    for (let i = 0; i < salaryColumn.len; i++) {\r\n        if (salaryColumn.getValue(i) > 70000) {\r\n            highPerfIndices.push(i);\r\n        }\r\n    }\r\n    const highPerformers = df.filter(new Uint32Array(highPerfIndices));\r\n    \r\n    // Calculate statistics\r\n    console.log(`Average salary: ${salaryColumn.mean()}`);\r\n    console.log(`Max salary: ${salaryColumn.max()}`);\r\n    console.log(`High performers: ${highPerformers.rowCount}`);\r\n}\r\n\r\nanalyzeEmployees().catch(console.error);\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load data efficiently"}),": Use CSV/JSON readers for best performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filter early"}),": Apply filters before expensive operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use appropriate types"}),": Let Veloxx infer types automatically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Chain operations"}),": Combine multiple operations for optimization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Process in chunks"}),": For very large datasets, process incrementally"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you've learned the basics:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\ud83e\udde0 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/intro",children:"Core Concepts"})})," - Deep dive into DataFrames and Series"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udcd6 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/intro",children:"Data Operations"})})," - Learn advanced data manipulation"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/api/rust",children:"API Reference"})})," - Explore the complete API"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/intro",children:"Examples"})})," - See real-world usage patterns"]}),"\n",(0,s.jsxs)(n.li,{children:["\u26a1 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/performance/benchmarks",children:"Benchmarks"})})," - Compare performance with other libraries"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Pro Tip",type:"tip",children:(0,s.jsx)(n.p,{children:"Veloxx shines with large datasets and complex operations. Try it on your real data to see the performance benefits!"})}),"\n",(0,s.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"data-pipeline",children:"Data Pipeline"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Rust data processing pipeline\r\nlet result = DataFrame::from_csv("raw_data.csv")?\r\n    .filter(&Condition::Ne("status".to_string(), Value::String("inactive".to_string())))?\r\n    .with_column("profit", &profit_expression)?\r\n    .group_by(vec!["region".to_string()])?\r\n    .agg(vec![("profit", "sum"), ("customers", "count")])?\r\n    .sort(vec!["profit_sum".to_string()], false)?;\r\n\r\nresult.to_csv("analysis_results.csv")?;\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Robust error handling\r\nmatch DataFrame::from_csv("data.csv") {\r\n    Ok(df) => {\r\n        // Process successfully loaded data\r\n        let result = df.group_by(vec!["category".to_string()])?;\r\n        println!("Analysis complete: {} groups", result.row_count());\r\n    }\r\n    Err(e) => {\r\n        eprintln!("Failed to load data: {}", e);\r\n        // Handle error appropriately\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Ready to dive deeper? Check out our ",(0,s.jsx)(n.a,{href:"/docs/intro",children:"comprehensive examples"})," or explore the ",(0,s.jsx)(n.a,{href:"/docs/api/rust",children:"API documentation"}),"!"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},1470:(e,n,r)=>{r.d(n,{A:()=>_});var a=r(6540),s=r(4164),t=r(3104),l=r(6347),i=r(205),o=r(7485),c=r(1682),d=r(679);function u(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:r,default:a}})=>({value:e,label:n,attributes:r,default:a}))}(r);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function h({queryString:e=!1,groupId:n}){const r=(0,l.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})},[s,r])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,t=p(e),[l,o]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:t})),[c,u]=h({queryString:r,groupId:s}),[x,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,s]=(0,d.Dv)(n);return[r,(0,a.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),v=(()=>{const e=c??x;return m({value:e,tabValues:t})?e:null})();(0,i.A)(()=>{v&&o(v)},[v]);return{selectedValue:l,selectValue:(0,a.useCallback)(e=>{if(!m({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)},[u,g,t]),tabValues:t}}var g=r(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(4848);function y({className:e,block:n,selectedValue:r,selectValue:a,tabValues:l}){const i=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.a_)(),c=e=>{const n=e.currentTarget,s=i.indexOf(n),t=l[s].value;t!==r&&(o(n),a(t))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;n=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;n=i[r]??i[i.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:a})=>(0,f.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{i.push(e)},onKeyDown:d,onClick:c,...a,className:(0,s.A)("tabs__item",v.tabItem,a?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function j({lazy:e,children:n,selectedValue:r}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find(e=>e.props.value===r);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:t.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function b(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",v.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(j,{...n,...e})]})}function _(e){const n=(0,g.A)();return(0,f.jsx)(b,{...e,children:u(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var a=r(6540);const s={},t=a.createContext(s);function l(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(t.Provider,{value:n},e.children)}},9365:(e,n,r)=>{r.d(n,{A:()=>l});r(6540);var a=r(4164);const s={tabItem:"tabItem_Ymn6"};var t=r(4848);function l({children:e,hidden:n,className:r}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:n,children:e})}}}]);